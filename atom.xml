<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的第一个博客</title>
  
  <subtitle>xia1769655343@hotmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-12T07:44:39.007Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>夏茂盛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java多线程编程核心技术----java多线程技能</title>
    <link href="http://yoursite.com/2017/11/12/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E8%83%BD/"/>
    <id>http://yoursite.com/2017/11/12/java多线程编程核心技术-java多线程技能/</id>
    <published>2017-11-12T05:28:31.000Z</published>
    <updated>2017-11-12T07:44:39.007Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>进程</strong>：通过查看“windows任务管理器”中的列表，完全可以将运行在内存中的exe文件理解成进程。</p><p>进程是受操作系统管理的基本运行单元。</p><p><strong>线程</strong>：线程可以理解成是在进程中独立运行的子任务。比如，QQ.exe运行时就有很多的子任务在同时运行。</p><p>那么，使用多线程有什么优点呢？</p><p>单线程运行环境：任务1和任务2是两个相互独立，互不关心的任务。任务1用时10秒，任务2用时1秒，任务2必须等任务1执行完10秒之后才能执行。</p><p> 特点：排队执行，即同步，CPU利用率大幅降低。</p><p>多线程运行环境：任务1和任务2是两个相互独立，互不关心的任务。任务1用时10秒，任务2用时1秒，CPU完全可以在任务1和任务2之间来回切换，使任务2不必等待10秒再运行。</p><p> 特点：在使用异步，系统的运行效率得到大幅度提升。</p><p>多线程是异步的，所以千万不要把Eclipse里代码的顺序当成线程的执行顺序，线程被调用的时机是随机的。</p><p>一个进程在运行时至少有一个线程在运行，比如在Java中，调用<code>public static void main()</code>方法就会创建一个线程，名字叫main（这个main和main方法名字没有任何关系），而且它是由JVM创建的。</p><h4 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h4><p>实现多线程编程有两种主要方式：一种是继承Thread类，另一种是实现Runnable接口。都是重写<code>run</code>方法。（java支持单继承）</p><p> Thread.java类也实现啦Runnable接口</p><p>Thread.java类中的start()方法通知“线程规划池”此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。</p><p>thread.run()方法而是同步，此线程对象并不交给“线程规划器”来进行处理，而是由main主线程来调用run()方法，也就是必须等待run()方法中的代码执行完之后才可以执行后面代码。</p><p>执行start()方法的顺序并不代表线程启动的顺序。</p><p>非线程安全：多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改，值不同步的情况，进而影响程序的执行流程。（使用synchronized关键字加锁）</p><p>留意i++与System.out.println()的异常：使用<code>System.out.println(&quot;i=&quot;+(i++))</code><br>虽然println()方法内部是同步的，但i++的操作却是在进入println()之前发生的，所以有发生非线程安全问题的概率。</p><p>currentThread()方法：返回代码段正在被哪个线程调用的信息。</p><p>isAlive()方法：判断当前线程是否处于活动状态。</p><p>sleep()方法：在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个“正在执行的线程”是指<code>this.currentThread()</code>返回的线程。</p><p>getId()方法：获取线程的唯一标识。</p><p>yield()方法：放弃当前的CPU资源，将它让给其他任务去占用CPU执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得CPU时间片。</p><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程正常退出，即run()方法完成后线程终止。</span><br><span class="line">使用stop()方法强行终止线程。（不推荐使用）</span><br><span class="line">使用interrupt方法中断线程。（还需要加入一个判断才可以完成线程----抛出异常，break，return）</span><br></pre></td></tr></table></figure><p>判断线程是否是停止状态：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.interrupted():测试当前线程是否已经是中断状态，执行后具有将状标志置清除为false的功能。当前线程是指运行this.interrupted()方法的线程。</span><br><span class="line"></span><br><span class="line">this.isInterrupted():测试线程Thread对象是否已经是中断状态，但不清除状态标志。</span><br></pre></td></tr></table></figure><h4 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h4><p>使用<code>suspend()</code>方法暂停线程，使用<code>resume()</code>方法恢复线程的执行。</p><p>缺点：独占，不同步</p><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p>线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。</p><p>设置线程优先级有助于帮“线程规划器”确定在下一次选择哪个线程来优先执行。</p><p>线程优先级分为<code>1~10</code>这10个等级，如果小于1或大于10，则JDK抛出异常<code>throw new IllegalArgumentException()</code>,</p><p>JDK使用3个常量来预置定义优先级的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final static int MIN_PRIORITY = 1;</span><br><span class="line">public final static int NORM_PRIORITY = 5;</span><br><span class="line">public final static int MAX_PRIORITY = 10;</span><br></pre></td></tr></table></figure><p> 线程优先级具有继承性：A线程启动B线程，则B线程的优先级与A一样。</p><p> 高优先级的线程总是<code>大部分</code>先执行完，但不代表高优先线程全部先执行完。</p><p> 线程的优先级与代码的执行顺序无关。</p><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p> 在java线程中有两种线程，一种是用户线程，另一种是守护线程。</p><p> 任何一个守护线程都是整个JVM中所有非守护线程的“保姆”，当进程中不存在非守护线程了，则守护线程自动销毁。</p><p> 典型的守护线程是：GC（垃圾回收器）</p><p> <code>thread.setDaemon(true)</code>：设置当前线程为守护线程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;：通过查看“windows任务管理器”中的列表，完全可以将运行在内存中的exe文件理解成进程。&lt;/p&gt;
      
    
    </summary>
    
      <category term="java多线程编程核心技术| java多线程技能" scheme="http://yoursite.com/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="java多线程编程核心技术" scheme="http://yoursite.com/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客源文件备份</title>
    <link href="http://yoursite.com/2017/11/11/Hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2017/11/11/Hexo博客源文件备份/</id>
    <published>2017-11-11T04:49:00.000Z</published>
    <updated>2017-12-15T03:11:24.948Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>使用Hexo编写博客还是比较Nice的，但是有一个问题就是Hexo博客的源文件是放在本地的，如果换一台电脑更新博客或者源文件不小心丢失啦，那就麻烦啦。未雨绸缪，现在给出这一问题的解决方案。</p><h4 id="备份方案"><a href="#备份方案" class="headerlink" title="备份方案"></a>备份方案</h4><p>想到的办法：</p><ul><li><p>将博客源文件拷贝到U盘里—但是这样做，无法同步。</p></li><li><p>使用网盘的话，据说.git文件不能上传同步—而且我对国内的网盘也不放心。</p></li></ul><p>综合起来，我觉得比较流行的方法就是：</p><ul><li>将博客源文件托管到Github.</li></ul><h4 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h4><ul><li><p>在Github上创建一个新的repository ,名字为<code>hexohexo</code>。（与你的本地博客源文件文件名相同即可）</p></li><li><p>进入本地<code>hexohexo</code>文件夹,执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置远程仓库地址，并更新，本地文件夹与远程仓库绑定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:hanweizhe/hexohexo.git</span><br><span class="line">git pull orgin master</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>(<strong>非必须项</strong>) 修改<code>.gitignore</code>文件（如果没有就手动创建一个），在里面加入<code>.*.log</code>和<code>public/</code>以及<code>.deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新，因此忽略上述目录下的文件更新，加快push速度。</p></li><li><p>完成Hexo源码在本地的提交，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"添加Hexo源码文件作为备份"</span></span><br></pre></td></tr></table></figure></li><li><p>将本地仓库文件推送到Github，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li>当远程仓库有更新时，执行以下命令，即可同步远程源代码文件到本地文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li></ul><p>现在在任何一台电脑上，只需要<code>git clone git@github.com:hanweizhe/hexoohexo.git</code> 即可将Hexo源文件复制到本地。（请将<code>git clone git@github.com:hanweizhe/hexohexo.git</code> 换成自己远程仓库地址）</p><p>在本地编写完博客时，顺序执行以下命令，即可完成Hexo博客源文件的同步更新，保持Github上的Hexo源码为最新的版本。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"更新Hexo源文件"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>至此，Hexo源代码文件就完成了同步与更新。</p><p>对于博主这种懒人，每次更新博文都需要输入两三行重复的git命令真是一件麻烦事，说不定哪天就忘记push到Github上啦。有没有更省事的办法？？完成自动备份 ？？</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>利用<code>NodeJs</code>的事件监听机制实现监听Hexo的<code>deployAfter</code>事件，待博客部署完成之后自动运行Git备份命令，以达到自动备份的目的。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="将hexohexo目录加入Git仓库（见前面）。"><a href="#将hexohexo目录加入Git仓库（见前面）。" class="headerlink" title="将hexohexo目录加入Git仓库（见前面）。"></a>将hexohexo目录加入Git仓库（见前面）。</h5><h5 id="安装shelljs模块。"><a href="#安装shelljs模块。" class="headerlink" title="安装shelljs模块。"></a>安装<code>shelljs</code>模块。</h5><p>要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块，该模块重新包装啦<code>child_process</code><br> ,调用系统命令更加方便。该模块需要安装后使用。</p><p>键入以下命令，完成<code>shelljs</code>模块的安装：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save shelljs</span><br></pre></td></tr></table></figure><h5 id="编写自动备份脚本"><a href="#编写自动备份脚本" class="headerlink" title="编写自动备份脚本"></a>编写自动备份脚本</h5><p>待到模块安装完成，在<code>hexohexo</code>根目录的<code>scripts</code>文件夹下新建一个js文件，文件名字随意取。</p><p><strong>如果没有<code>scripts</code>目录，请新建一个。</strong></p><p>然后再脚本中，写入以下内容：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">       hexo.on(<span class="string">'deployAfter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当   deploy完成后执行备份</span></span><br><span class="line">           run();</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"产生了一个错误&lt;(￣3￣)&gt;     !，错误详情为："</span> + e.toString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!which(<span class="string">'git'</span>)) &#123;</span><br><span class="line">           echo(<span class="string">'Sorry, this script requires   git'</span>);</span><br><span class="line">           exit(<span class="number">1</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           echo(<span class="string">"======================Auto   Backup Begin==========================="</span>);</span><br><span class="line">           cd(<span class="string">'D:/hexohexo'</span>);    <span class="comment">//此处修改为   Hexo根目录路径</span></span><br><span class="line">           <span class="keyword">if</span> (exec(<span class="string">'git add --all'</span>).code   !== <span class="number">0</span>) &#123;</span><br><span class="line">               echo(<span class="string">'Error: Git add       failed'</span>);</span><br><span class="line">               exit(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (exec(<span class="string">'git commit -am "Form   auto backup script\'s commit"'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">               echo(<span class="string">'Error: Git commit     failed'</span>);</span><br><span class="line">               exit(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (exec(<span class="string">'git push origin       master'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">               echo(<span class="string">'Error: Git push        failed'</span>);</span><br><span class="line">               exit(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           echo(<span class="string">"==================Auto      Backup Complete============================"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>其中，需要修改地<code>17</code>行的<code>D:/hexohexo</code>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）；</li><li>如果你的Git远程仓库名称不为<code>origin</code>的话（默认为<code>origin</code>），还需要修改第<code>28</code>行执行的push命令，修改成自己的远程仓库名与相应的分支名。</li></ul><p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，将会得到类似以下结果：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> INFO  Deploying: git&gt;</span><br><span class="line">INFO  Clearing .deploy folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">[master 3020788] Site updated: 2015-07-06 15:08:06</span><br><span class="line"> 5 files changed, 160 insertions(+), 58 deletions(-)</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch gh-pages from git@github.com:smilexi</span><br><span class="line">amo/notes.git.</span><br><span class="line">To git@github.com:smilexiamo/notes.git</span><br><span class="line">   02adbe4..3020788  master -&gt; gh-pages</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch gitcafe-pages from git@gitcafe.com:s</span><br><span class="line">milexiamo/smilexiamo.git.</span><br><span class="line">To git@gitcafe.com:smilexiamo/smilexiamo.git</span><br><span class="line">   02adbe4..3020788  master -&gt; gitcafe-pages</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br><span class="line">======================Auto Backup Begin===========================</span><br><span class="line">[master f044360] Form auto backup script<span class="string">'s commit</span></span><br><span class="line"><span class="string"> 2 files changed, 35 insertions(+), 2 deletions(-)</span></span><br><span class="line"><span class="string"> rewrite db.json (100%)</span></span><br><span class="line"><span class="string">To git@github.com:smilexiamo/hexo.git</span></span><br><span class="line"><span class="string">   8f2b4b4..f044360  master -&gt; master</span></span><br><span class="line"><span class="string">==================Auto Backup Complete============================</span></span><br></pre></td></tr></table></figure><p>这样子，每次更新博客并<code>hexo deploy</code>到服务器上之后。备份就会自动启动并完成备份啦！~~~ 是不是很方便呀！</p><p>Enjoy it!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;使用Hexo编写博客还是比较Nice的，但是有一个问题就是Hexo博客的源文件是放在本地的，如果换一台电脑更新博客或者源文件不小心丢失啦，那
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="教程| Hexo教程 | Hexo源文件备份" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B-Hexo%E6%95%99%E7%A8%8B-Hexo%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>用hexo极速搭建博客</title>
    <link href="http://yoursite.com/2017/11/10/%E7%94%A8hexo%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/11/10/用hexo极速搭建博客/</id>
    <published>2017-11-10T13:04:00.000Z</published>
    <updated>2017-11-11T06:26:31.520Z</updated>
    
    <content type="html"><![CDATA[<p>hexo是一个非常轻量且快速的博客生成框架，可以使用markdown便捷的生成文章。</p><p>本文主要介绍windows下如何搭建hexo5.1.3+环境并发布至github。默认读者具有命令行使用经验和一定的web编程基础。</p><p>hexo搭建完成后只需要三步就可以完成博文的更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n  <span class="comment"># 新建</span></span><br><span class="line">hexo g  <span class="comment"># 生成</span></span><br><span class="line">hexo d  <span class="comment"># 发布</span></span><br></pre></td></tr></table></figure><p>下面介绍windows下如何搭建hexo5.1.3环境并发布至github</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>到<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">node.js</a>官网下载node.js并安装。我使用的是win8.1x64下的8.9.1版。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>git客户端很多，我使用的是git官方提供的工具，下载速度可能较慢。</p><h4 id="安装sublime（非必须）"><a href="#安装sublime（非必须）" class="headerlink" title="安装sublime（非必须）"></a>安装sublime（非必须）</h4><p>作为一个小前端，sublime作为编辑器实在是不能再好用，不过这个只是文本编辑器使用，大家可以根据喜好自由选择工具，切记不要使用windows自带的记事本。</p><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p>我们使用Github官方提供的Github Pages这一服务作为静态博客的服务器。申请Github账户和与git通过ssh建立连接网上很多详细的教程，此处不再赘述。</p><p><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">GitHub Help - Generating SSH Keys</a></p><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>node.js和git安装好后，建议使用git提供的命令行窗口进行操作。</p><p><strong> windows自带的cmd会报错。</strong></p><p>执行如下命令可安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h3><p>执行init命令初始化hexo到你指定的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="comment">#folder为你指定的目录</span></span><br></pre></td></tr></table></figure><p>或者cd到你的指定目录，执行<strong> hexo init </strong></p><p>至此，hexo的安装工作已经完成。</p><h4 id="hexo必备插件"><a href="#hexo必备插件" class="headerlink" title="hexo必备插件"></a>hexo必备插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save <span class="comment">#索引生成器</span></span><br><span class="line">$ npm install hexo-generator-archive --save <span class="comment">#归档生成器</span></span><br><span class="line">$ npm install hexo-generator-category --save <span class="comment">#分类生成器</span></span><br><span class="line">$ npm install hexo-generator-tag --save <span class="comment">#标签生成器</span></span><br><span class="line">$ npm install hexo-server --save <span class="comment">#本地服务</span></span><br><span class="line">$ npm install hexo-deploy-git --save <span class="comment">#hexo通过git发布（必装）</span></span><br><span class="line">$ npm install hexo-render-market@0.2.7 --save <span class="comment">#渲染器</span></span><br><span class="line">$ npm install hexo-render-stylus@0.3.0 --save <span class="comment">#渲染器</span></span><br></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>cd至之前初始化的目录，执行如下命令，即可生成静态页面至public目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>执行如下命令，启动本地服务器，进行预览。<br>必须安装hexo-server插件，不然无法启动本地服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>浏览器输入localhost：4000即可访问默认的hexo博客效果。</p><p><strong> 注意：</strong> hosts文件中localhost是否被占用以及4000端口可能被福昕阅读器占用。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>编辑hexo根目录下的_config.yml文件，找到最下面的deploy，我使用的是hexo5.1.3为如下格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> repo: https://github.com/hanweizhe/hanweizhe.hithub.io.git <span class="comment">#你的Github Pages的https链接</span></span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p>保存配置文件后，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p><strong> 注意： </strong>  yml格式文件冒号后面必须加一个空格。</p><p>执行完毕后访问hanweizhe.github.io即可看到部署在Github上的默认博客，第一次发布可能会有10分钟的延迟。</p><p>至此，hexo已经成功帮助我们生成了一个博客，非常的方便。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$　hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">$  hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">$  hexo generate <span class="comment">#根据source目录md文件生成静态页面至public目录</span></span><br><span class="line">$  hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl+c'关闭server）</span></span><br><span class="line">$  hexo deploy <span class="comment">#将.deploy目录部署到Github</span></span><br><span class="line">$  hexo <span class="built_in">help</span> <span class="comment">#查看帮助</span></span><br><span class="line">$  hexo vwesion <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h4 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo n == hexo new</span><br></pre></td></tr></table></figure><p>坑：</p><ol><li>有时会出现首页只有一篇文章的情况，这个时候需要hexo渲染两次，原因不明。</li><li>标题中不能含有[]，否则无法编译。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo是一个非常轻量且快速的博客生成框架，可以使用markdown便捷的生成文章。&lt;/p&gt;
&lt;p&gt;本文主要介绍windows下如何搭建hexo5.1.3+环境并发布至github。默认读者具有命令行使用经验和一定的web编程基础。&lt;/p&gt;
&lt;p&gt;hexo搭建完成后只需要三
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="教程| Hexo教程 | Hexo快速搭建" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B-Hexo%E6%95%99%E7%A8%8B-Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/10/hello-world/"/>
    <id>http://yoursite.com/2017/11/10/hello-world/</id>
    <published>2017-11-10T10:34:11.806Z</published>
    <updated>2017-11-10T07:46:41.732Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
