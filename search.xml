<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo博客源文件备份]]></title>
    <url>%2F2017%2F11%2F11%2FHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[前言使用Hexo编写博客还是比较Nice的，但是有一个问题就是Hexo博客的源文件是放在本地的，如果换一台电脑更新博客或者源文件不小心丢失啦，那就麻烦啦。未雨绸缪，现在给出这一问题的解决方案。 备份方案想到的办法： 将博客源文件拷贝到U盘里—但是这样做，无法同步。 使用网盘的话，据说.git文件不能上传同步—而且我对国内的网盘也不放心。 综合起来，我觉得比较流行的方法就是： 将博客源文件托管到Github. 实现方法： 在Github上创建一个新的repository ,名字为hexohexo。（与你的本地博客源文件文件名相同即可） 进入本地hexohexo文件夹,执行以下命令： 1git init 设置远程仓库地址，并更新，本地文件夹与远程仓库绑定： 12 git remote add origin git@github.com:hanweizhe/hexohexo.gitgit pull orgin master (非必须项) 修改.gitignore文件（如果没有就手动创建一个），在里面加入.*.log和public/以及.deploy*/。因为每次执行hexo generate命令时，上述目录都会被重写更新，因此忽略上述目录下的文件更新，加快push速度。 完成Hexo源码在本地的提交，执行以下命令： 12git add . git commit -m "添加Hexo源码文件作为备份" 将本地仓库文件推送到Github，执行以下命令： 1git push origin master 当远程仓库有更新时，执行以下命令，即可同步远程源代码文件到本地文件。 1git pull origin master 现在在任何一台电脑上，只需要git clone git@github.com:hanweizhe/hexoohexo.git 即可将Hexo源文件复制到本地。（请将git clone git@github.com:hanweizhe/hexohexo.git 换成自己远程仓库地址） 在本地编写完博客时，顺序执行以下命令，即可完成Hexo博客源文件的同步更新，保持Github上的Hexo源码为最新的版本。 123git add .git commit -m "更新Hexo源文件"git push origin master 至此，Hexo源代码文件就完成了同步与更新。 对于博主这种懒人，每次更新博文都需要输入两三行重复的git命令真是一件麻烦事，说不定哪天就忘记push到Github上啦。有没有更省事的办法？？完成自动备份 ？？ ：happy： 原理利用NodeJs的事件监听机制实现监听Hexo的deployAfter事件，待博客部署完成之后自动运行Git备份命令，以达到自动备份的目的。 实现将hexohexo目录加入Git仓库（见前面）。安装shelljs模块。要实现这个自动备份功能，需要依赖NodeJs的一个shelljs模块，该模块重新包装啦child_process,调用系统命令更加方便。该模块需要安装后使用。 键入以下命令，完成shelljs模块的安装： 1npm install --save shelljs 编写自动备份脚本 待到模块安装完成，在hexohexo根目录的scripts文件夹下新建一个js文件，文件名字随意取。 如果没有scripts目录，请新建一个。 然后再脚本中，写入以下内容： 123456789101112131415161718192021222324252627282930require('shelljs/global');try &#123; hexo.on('deployAfter', function() &#123;//当 deploy完成后执行备份 run(); &#125;); &#125; catch (e) &#123; console.log("产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：" + e.toString()); &#125; function run() &#123; if (!which('git')) &#123; echo('Sorry, this script requires git'); exit(1); &#125; else &#123; echo("======================Auto Backup Begin==========================="); cd('D:/hexohexo'); //此处修改为 Hexo根目录路径 if (exec('git add --all').code !== 0) &#123; echo('Error: Git add failed'); exit(1); &#125; if (exec('git commit -am "Form auto backup script\'s commit"').code !== 0) &#123; echo('Error: Git commit failed'); exit(1); &#125; if (exec('git push origin master').code !== 0) &#123; echo('Error: Git push failed'); exit(1); &#125; echo("==================Auto Backup Complete============================") &#125; &#125; 其中，需要修改地17行的D:/hexohexo路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）； 如果你的Git远程仓库名称不为origin的话（默认为origin），还需要修改第28行执行的push命令，修改成自己的远程仓库名与相应的分支名。 保存脚本并退出，然后执行hexo deploy命令，将会得到类似以下结果： 1234567891011121314151617181920212223 INFO Deploying: git&gt;INFO Clearing .deploy folder...INFO Copying files from public folder...[master 3020788] Site updated: 2015-07-06 15:08:06 5 files changed, 160 insertions(+), 58 deletions(-)Branch master set up to track remote branch gh-pages from git@github.com:smilexiamo/notes.git.To git@github.com:smilexiamo/notes.git 02adbe4..3020788 master -&gt; gh-pagesOn branch masternothing to commit, working directory cleanBranch master set up to track remote branch gitcafe-pages from git@gitcafe.com:smilexiamo/smilexiamo.git.To git@gitcafe.com:smilexiamo/smilexiamo.git 02adbe4..3020788 master -&gt; gitcafe-pagesINFO Deploy done: git======================Auto Backup Begin===========================[master f044360] Form auto backup script's commit 2 files changed, 35 insertions(+), 2 deletions(-) rewrite db.json (100%)To git@github.com:smilexiamo/hexo.git 8f2b4b4..f044360 master -&gt; master==================Auto Backup Complete============================ 这样子，每次更新博客并hexo deploy到服务器上之后。备份就会自动启动并完成备份啦！~~~ 是不是很方便呀！ Enjoy it!]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程| Hexo教程 | Hexo源文件备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用hexo极速搭建博客]]></title>
    <url>%2F2017%2F11%2F10%2F%E7%94%A8hexo%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[hexo是一个非常轻量且快速的博客生成框架，可以使用markdown便捷的生成文章。 本文主要介绍windows下如何搭建hexo5.1.3+环境并发布至github。默认读者具有命令行使用经验和一定的web编程基础。 hexo搭建完成后只需要三步就可以完成博文的更新。 123hexo n # 新建hexo g # 生成hexo d # 发布 下面介绍windows下如何搭建hexo5.1.3环境并发布至github 环境准备安装node.js到node.js官网下载node.js并安装。我使用的是win8.1x64下的8.9.1版。 安装Gitgit客户端很多，我使用的是git官方提供的工具，下载速度可能较慢。 安装sublime（非必须）作为一个小前端，sublime作为编辑器实在是不能再好用，不过这个只是文本编辑器使用，大家可以根据喜好自由选择工具，切记不要使用windows自带的记事本。 Github我们使用Github官方提供的Github Pages这一服务作为静态博客的服务器。申请Github账户和与git通过ssh建立连接网上很多详细的教程，此处不再赘述。 GitHub Help - Generating SSH Keys hexo安装node.js和git安装好后，建议使用git提供的命令行窗口进行操作。 windows自带的cmd会报错。 执行如下命令可安装hexo： 1npm install -g hexo hexo初始化执行init命令初始化hexo到你指定的目录。 1hexo init &lt;folder&gt; #folder为你指定的目录 或者cd到你的指定目录，执行 hexo init 至此，hexo的安装工作已经完成。 hexo必备插件12345678$ npm install hexo-generator-index --save #索引生成器$ npm install hexo-generator-archive --save #归档生成器$ npm install hexo-generator-category --save #分类生成器$ npm install hexo-generator-tag --save #标签生成器$ npm install hexo-server --save #本地服务$ npm install hexo-deploy-git --save #hexo通过git发布（必装）$ npm install hexo-render-market@0.2.7 --save #渲染器$ npm install hexo-render-stylus@0.3.0 --save #渲染器 生成静态页面cd至之前初始化的目录，执行如下命令，即可生成静态页面至public目录 1$ hexo g 本地启动执行如下命令，启动本地服务器，进行预览。必须安装hexo-server插件，不然无法启动本地服务器。 1$ hexo s 浏览器输入localhost：4000即可访问默认的hexo博客效果。 注意： hosts文件中localhost是否被占用以及4000端口可能被福昕阅读器占用。 发布编辑hexo根目录下的_config.yml文件，找到最下面的deploy，我使用的是hexo5.1.3为如下格式。 1234deploy: type: git repo: https://github.com/hanweizhe/hanweizhe.hithub.io.git #你的Github Pages的https链接 branch: master 保存配置文件后，执行如下命令： 1$ hexo d 注意： yml格式文件冒号后面必须加一个空格。 执行完毕后访问hanweizhe.github.io即可看到部署在Github上的默认博客，第一次发布可能会有10分钟的延迟。 至此，hexo已经成功帮助我们生成了一个博客，非常的方便。 附录常用命令：1234567$ hexo new "postName" #新建文章$ hexo new page "pageName" #新建页面$ hexo generate #根据source目录md文件生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，'ctrl+c'关闭server）$ hexo deploy #将.deploy目录部署到Github$ hexo help #查看帮助$ hexo vwesion #查看Hexo的版本 简写：1234hexo g == hexo generatehexo s == hexo serverhexo d == hexo deployhexo n == hexo new 坑： 有时会出现首页只有一篇文章的情况，这个时候需要hexo渲染两次，原因不明。 标题中不能含有[]，否则无法编译。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程| Hexo教程 | Hexo快速搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
